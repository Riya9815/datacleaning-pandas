# -*- coding: utf-8 -*-
"""datacleaning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sISciYczSndZfCqeX2NbRY-nXtxPieXh

# Datacleaning Pandas
"""

import pandas as pd
import numpy as np

#DataFrame
df=pd.DataFrame({'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm','Budapest_PaRis','Brussels_londOn'],'FlightNumber':[10045,np.nan,10065,np.nan,10085],'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],'Airline':['KLM(!)','<Air France>(12)','(British Airways. )','12.Air France','''Swiss Air''']})

df

# NULL values in the dataframe
df.isna().sum()

"""# 1. Some values in the the FlightNumber column are missing. These numbers are meant to increase by 10 with each row so 10055 and 10075 need to be put inplace. Fill in these missing numbers and make the column an integer column(instead of a float column)."""

#Filling the NaN values with the previous values
df.fillna(method='ffill')

# notnull function returns boolean values according to null and not null values
df.FlightNumber.notnull()

#True=1 False=0 Cummulative sum of the return values of notnull function is calculated
df.FlightNumber.notnull().cumsum()

#Numbering each item in each group from 0 to the length of that group - 1.
df.groupby(df.FlightNumber.notnull().cumsum()).cumcount()

df['FlightNumber']=df.FlightNumber.ffill()+df.groupby(df.FlightNumber.notnull().cumsum()).cumcount()*10

df

df.dtypes # the type of flightnumber column is float

df['FlightNumber'] = df['FlightNumber'].astype(int) # changing the type of column FlightNumber from float to int

df.dtypes

"""# 2. The From_To column would be better as two separate columns! Split each string on the underscore delimiter _ to give a new temporary DataFrame with the correct values. Assign the correct column names to this temporary DataFrame."""

df.From_To.str.split("_",expand=True)

#split(delimiter,n) n is the limit of splits if there are multiple delimiters
df_new=pd.DataFrame(df.From_To.str.split('_',1).tolist(),
                         columns = ['From','To'])

df_new# temporary dataframe

"""# 3. Notice how the capitalisation of the city names is all mixed up in this temporary DataFrame. Standardise the strings so that only the first letter is uppercase (e.g. "londON" should become "London".)

"""

df['From_To'] = df['From_To'].str.title()

df

df.drop('From_To',axis=1,inplace=True)

df

"""# 4. Delete the From_To column from df and attach the temporary DataFramefrom the previous questions.

"""

df_new_final=df_new.join(df)

df_new_final

"""## 5. In the RecentDelays column, the values have been entered into the DataFrame as a list. We would like each first value in its own column, each second value in its own column, and so on. If there isn't an Nth value, the value should be NaN. Expand the Series of lists into a DataFrame named delays, rename the columns delay_1, delay_2, etc. and replace the unwanted RecentDelays column in df with delays."""

delays = pd.DataFrame(df_new_final.RecentDelays.tolist(), index= df.index,columns=['delay_1','delay_2','delay_3'])

delays

df=df.join(delays)

df.drop('RecentDelays',axis=1,inplace=True)

df

